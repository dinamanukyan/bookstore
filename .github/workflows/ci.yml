name: BookStore APP CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Build Docker images for each service using their Dockerfile.dev
      - name: Build Server Image
        run: |
          docker build -f server/Dockerfile.dev -t bookstore_server:latest server
      
      - name: Build Client Image
        run: |
          docker build -f client/Dockerfile.dev -t bookstore_client:latest client
      
      - name: Build Nginx Image
        run: |
          docker build -f nginx/Dockerfile.dev -t bookstore_nginx:latest nginx

      # Run vulnerability scans on each built image using Trivy, but do not fail the pipeline if vulnerabilities are found
      - name: Scan Server Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_server:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scan Client Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_client:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Scan Nginx Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookstore_nginx:latest
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      # OPTIONAL: Push images to AWS ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Tag and Push Server Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_SERVER: ${{ secrets.ECR_REPOSITORY_SERVER }}
        run: |
          docker tag bookstore_server:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_SERVER:latest

      - name: Tag and Push Client Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_CLIENT: ${{ secrets.ECR_REPOSITORY_CLIENT }}
        run: |
          docker tag bookstore_client:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_CLIENT:latest

      - name: Tag and Push Nginx Image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NGINX: ${{ secrets.ECR_REPOSITORY_NGINX }}
        run: |
          docker tag bookstore_nginx:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NGINX:latest
          
      - name: Create SSH key file
        run: |
          echo -e "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          
   
      - name: Copy docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/
      
      #- name: Install Docker Compose on EC2
        #run: |
          #ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_IP }} "
            #sudo apt update &&
            #sudo apt install -y docker-compose"

      - name: Install Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_IP }} "
            sudo rm -f /etc/apt/sources.list.d/grafana.list &&
            sudo apt-key del 963FA27710458545 || true &&
            sudo apt update --allow-releaseinfo-change &&
            sudo apt clean &&
            sudo apt install -y docker-compose"


      - name: Copy server directory to EC2
        run: |
            scp -o StrictHostKeyChecking=no -i private_key.pem -r server ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/
            
      - name: Copy client directory to EC2
        run: |
            scp -o StrictHostKeyChecking=no -i private_key.pem -r client ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/
            
      - name: Copy ngix directory to EC2
        run: |
            scp -o StrictHostKeyChecking=no -i private_key.pem -r nginx ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/
      
      - name: Run application via docker-compose
        run: |
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i private_key.pem ubuntu@${{ secrets.EC2_IP }} "docker-compose up -d"

     

      



          
